#!/usr/bin/env python3

import sys, socket, time, datetime, socket

def hexprint(buf):
    return ", ".join(["%02x" % n for n in buf])

# Calcula checksum de frame longo
# Presume que "dados" contém o byte de comprimento mas não contém o byte de checksum
def checksum(dados):
    checksum = 0
    for n in dados:
        checksum ^= n
    checksum ^= 0xff
    checksum &= 0xff
    return checksum

def contact_id_encode(number, length):
    number = abs(number)
    buf = []
    for i in range(0, length):
        digit = number % 10
        number //= 10
        if not digit:
            digit = 0x0a
        buf = [digit] + buf
    return buf

HOST = "192.168.0.16"
PORT = 9009

# recebidos via event 0xb5

indice_foto = 321 # int(sys.argv[2])
indice_foto = [ indice_foto // 256, indice_foto % 256 ]
numero_fotos = [2] # [int(sys.argv[3])]

# Autentica

dst_id = [0x00, 0x00]
src_id = [0x8f, 0xff]
length = [0x00, 0x0a]  # comprimento inclui cmd, nao inclui checksum
cmd =    [0xf0, 0xf0]
swtype = [0x02]
senha = contact_id_encode(int(sys.argv[1]), 6)
swver = [0x10]  # nibble.nibble (0x10 = 1.0)
msg = dst_id + src_id + length + cmd + swtype + senha + swver
msg += [ checksum(msg) ]

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
s.connect((HOST, PORT))

print(">", hexprint(msg))
s.sendall(bytearray(msg))
data = s.recv(1024)
print("<", hexprint(data))

# Obtém dados da foto

dst_id = [0x00, 0x00]
src_id = [0x8f, 0xff]
length = [0x00, 0x06]
cmd =    [0x0b, 0xb0]
event_index = indice_foto
picture_index = [1]  # qual imagem sera enviada
fragment_index = [0]  # fragmento 0 = solicitar info
msg = dst_id + src_id + length + cmd + event_index + picture_index + fragment_index
msg += [ checksum(msg) ]

print()
print(">", hexprint(msg))
s.sendall(bytearray(msg))
data = s.recv(1024) # espaço dos bytes de foto estufado com 0xff
print("<", hexprint(data))
print("Indice do evento: %d" % (data[8] * 256 + data[9]))
print("Indice da imagem : %d" % (data[10]))
print("Número de imagens: %d" % (data[11]))
print("Indice do fragmento: %d" % (data[12]))
nr_fragmentos = data[13]
print("Numero de fragmentos: %d" % nr_fragmentos)
print("Bytes recebidos: %d" % (len(data) - 1 - 14))

f = open("imagem2.jpeg", "wb")

for frag in range(1, nr_fragmentos + 1):
    dst_id = [0x00, 0x00]
    src_id = [0x8f, 0xff]
    length = [0x00, 0x06]
    cmd =    [0x0b, 0xb0]
    event_index = indice_foto
    picture_index = [0]  # qual imagem sera enviada
    fragment_index = [frag]  # fragmento solicitado
    msg = dst_id + src_id + length + cmd + event_index + picture_index + fragment_index
    msg += [ checksum(msg) ]

    print()
    print(">", hexprint(msg))
    s.sendall(bytearray(msg))
    data = s.recv(1024)
    print("<", hexprint(data))
    print("Bytes recebidos: %d" % (len(data) - 1 - 14))
    if checksum(data) == 0:
        print("Checksum ok")
    else:
        print("Checksum não ok")
    f.write(data[14:-1])

f.close()

# Desconecta

dst_id = [0x00, 0x00]
src_id = [0x8f, 0xff]
length = [0x00, 0x02]
cmd =    [0xf0, 0xf1]
chksum = [checksum(dst_id + src_id + length + cmd)]
msg = dst_id + src_id + length + cmd
msg += [ checksum(msg) ]

print()
print(">", hexprint(msg))
s.sendall(bytearray(msg))
data = s.recv(1024)
print("<", hexprint(data))
